#include "utils.h"
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <memory.h>

using namespace std;

static int cnt = 0;


void BubbleSort(int n, int arr[]){
    for(int i = n - 1; i > 0; --i){
        for(int j = 0; j < i; ++j){
            if(isBigger(arr[j], arr[j+1]))
                Swap(arr[j], arr[j+1]);
            else
                continue;
        }
        PrintArr(n, arr);
    }
}

void InsertSort(int n, int arr[]){
    for(int i = 1; i < n; ++i){
        for(int j = i; j > 0 && arr[j-1] > arr[j]; --j)
            Swap(arr[j-1], arr[j]);
        PrintArr(n, arr);
    }
}

void QuickSort(int n, int arr[], int l, int r){
    int i,j;
    if(l >= r)
        return;
    //srand(time(NULL));
    //Swap(arr[l], arr[l+rand()%(r-l+1)]);
    //PrintArr(n, arr);
    int t = arr[l];
    i = l;
    j = r + 1;
    for(;;){
        do i++; while(i <= r && arr[i] < t);
        do j--; while(arr[j] > t);
        if(i > j)
            break;
        Swap(arr[i], arr[j]);
        //PrintArr(n, arr);
    }
    Swap(arr[l], arr[j]);
    //PrintArr(n, arr);
    QuickSort(n, arr, l, j-1);
    QuickSort(n, arr, j+1, r);
}

void QuickSort2(int n, int arr[], int l, int r){
    int i,j;
    if(l >= r)
        return;
    //srand(time(NULL));
    //Swap(arr[l], arr[l+rand()%(r-l+1)]);
    //PrintArr(n, arr);
    int t = arr[l];
    i = l;
    j = r;
    while(i<j){
        while(i < j && arr[j] >= t) --j;
        Swap(arr[i], arr[j]);
        while(i < j && arr[i] <= t) ++i;
        Swap(arr[i], arr[j]);
        //PrintArr(n, arr);
    }
    Swap(arr[l], arr[i]);
    //PrintArr(n, arr);
    QuickSort2(n, arr, l, j-1);
    QuickSort2(n, arr, j+1, r);
}
void QuickSort3(int n, int arr[], int l, int r){
    int i,j;
    if(l >= r)
        return;
    srand(time(NULL));
    Swap(arr[l], arr[l+rand()%(r-l+1)]);
    //PrintArr(n, arr);
    int t = arr[l];
    i = l;
    j = r + 1;
    for(;;){
        do i++; while(i <= r && arr[i] < t);
        do j--; while(arr[j] > t);
        if(i > j)
            break;
        Swap(arr[i], arr[j]);
        //PrintArr(n, arr);
    }
    Swap(arr[l], arr[j]);
    //PrintArr(n, arr);
    QuickSort3(n, arr, l, j-1);
    QuickSort3(n, arr, j+1, r);
}

int main(){
    //int arr[] = {6,4,7,2,5,1,10,3};
    //int arr[] = {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8};
    //int arr[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50};
    int n = 3000000;
    int* arr = new int[n];
    //memset(arr, 1, n*sizeof(int));
    srand(time(NULL));
    for(int i = 0; i < n; ++i)
        arr[i] = rand() % n;
    //int n = sizeof(arr) / sizeof(int);
    //PrintArr(n, arr);
    //BubbleSort(n, arr);
    clock_t start, ends;
    start = clock();
    QuickSort(n, arr, 0, n-1);
    ends = clock();
    //PrintArr(n, arr);
    cout << cnt << endl;
    cout << "Running Time: " << (double)(ends-start)/CLOCKS_PER_SEC << endl;
    start = clock();
    QuickSort3(n, arr, 0, n-1);
    ends = clock();
    //PrintArr(n, arr);
    cout << cnt << endl;
    cout << "Running Time: " << (double)(ends-start)/CLOCKS_PER_SEC << endl;
    delete[] arr;
    return 0;
}